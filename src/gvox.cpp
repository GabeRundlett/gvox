#include <gvox/gvox.h>

#include <vector>
#include <array>
#include <bit>

#include "gvox/core.h"
#include "gvox/format.h"
#include "types.hpp"
#include "utils/handle.hpp"

struct GvoxChainStruct {
    GvoxStructType struct_type;
    void const *next;
};

auto gvox_fill(GvoxFillInfo const *info) GVOX_FUNC_ATTRIB->GvoxResult {
    ZoneScoped;

    if (info == nullptr) {
        return GVOX_ERROR_INVALID_ARGUMENT;
    }
    if (info->struct_type != GVOX_STRUCT_TYPE_FILL_INFO) {
        return GVOX_ERROR_BAD_STRUCT_TYPE;
    }

    // issue the fill call
    return info->dst->desc.fill(info->dst->self, info->src_data, info->src_desc, info->range);
}

auto gvox_move(GvoxMoveInfo const *info) GVOX_FUNC_ATTRIB->GvoxResult {
    ZoneScoped;

    if (info == nullptr) {
        return GVOX_ERROR_INVALID_ARGUMENT;
    }
    if (info->struct_type != GVOX_STRUCT_TYPE_MOVE_INFO) {
        return GVOX_ERROR_BAD_STRUCT_TYPE;
    }

    // issue the fill call
    return info->dst->desc.move(info->dst->self, info->src_containers, info->src_container_ranges, info->src_dst_offsets, info->src_container_n);
}

auto gvox_blit_prepare(GvoxParser parser) GVOX_FUNC_ATTRIB->GvoxResult {
    ZoneScoped;

    if (parser == nullptr) {
        return GVOX_ERROR_INVALID_ARGUMENT;
    }

    return GVOX_ERROR_UNKNOWN;
}

auto gvox_blit(GvoxBlitInfo const *info) GVOX_FUNC_ATTRIB->GvoxResult {
    ZoneScoped;

    if (info == nullptr) {
        return GVOX_ERROR_INVALID_ARGUMENT;
    }
    if (info->struct_type != GVOX_STRUCT_TYPE_BLIT_INFO) {
        return GVOX_ERROR_BAD_STRUCT_TYPE;
    }

    return GVOX_ERROR_UNKNOWN;
}

auto gvox_sample(GvoxSampleInfo const *info) GVOX_FUNC_ATTRIB->GvoxResult {
    ZoneScoped;

    if (info == nullptr) {
        return GVOX_ERROR_INVALID_ARGUMENT;
    }
    if (info->struct_type != GVOX_STRUCT_TYPE_SAMPLE_INFO) {
        return GVOX_ERROR_BAD_STRUCT_TYPE;
    }

    auto result = info->src->desc.sample(info->src->self, info->samples, info->sample_n);
    if (result != GVOX_SUCCESS) {
        return result;
    }

    return GVOX_SUCCESS;
}

// Stream API

// R4G4_UNORM_PACK8 = 1,
// R4G4B4A4_UNORM_PACK16 = 2,
// B4G4R4A4_UNORM_PACK16 = 3,
// R5G6B5_UNORM_PACK16 = 4,
// B5G6R5_UNORM_PACK16 = 5,
// R5G5B5A1_UNORM_PACK16 = 6,
// B5G5R5A1_UNORM_PACK16 = 7,
// A1R5G5B5_UNORM_PACK16 = 8,
// R8_UNORM = 9,
// R8_SNORM = 10,
// R8_USCALED = 11,
// R8_SSCALED = 12,
// R8_UINT = 13,
// R8_SINT = 14,
// R8_SRGB = 15,
// R8G8_UNORM = 16,
// R8G8_SNORM = 17,
// R8G8_USCALED = 18,
// R8G8_SSCALED = 19,
// R8G8_UINT = 20,
// R8G8_SINT = 21,
// R8G8_SRGB = 22,
// R8G8B8_UNORM = 23,
// R8G8B8_SNORM = 24,
// R8G8B8_USCALED = 25,
// R8G8B8_SSCALED = 26,
// R8G8B8_UINT = 27,
// R8G8B8_SINT = 28,
// R8G8B8_SRGB = 29,
// B8G8R8_UNORM = 30,
// B8G8R8_SNORM = 31,
// B8G8R8_USCALED = 32,
// B8G8R8_SSCALED = 33,
// B8G8R8_UINT = 34,
// B8G8R8_SINT = 35,
// B8G8R8_SRGB = 36,
// R8G8B8A8_UNORM = 37,
// R8G8B8A8_SNORM = 38,
// R8G8B8A8_USCALED = 39,
// R8G8B8A8_SSCALED = 40,
// R8G8B8A8_UINT = 41,
// R8G8B8A8_SINT = 42,
// R8G8B8A8_SRGB = 43,
// B8G8R8A8_UNORM = 44,
// B8G8R8A8_SNORM = 45,
// B8G8R8A8_USCALED = 46,
// B8G8R8A8_SSCALED = 47,
// B8G8R8A8_UINT = 48,
// B8G8R8A8_SINT = 49,
// B8G8R8A8_SRGB = 50,
// A8B8G8R8_UNORM_PACK32 = 51,
// A8B8G8R8_SNORM_PACK32 = 52,
// A8B8G8R8_USCALED_PACK32 = 53,
// A8B8G8R8_SSCALED_PACK32 = 54,
// A8B8G8R8_UINT_PACK32 = 55,
// A8B8G8R8_SINT_PACK32 = 56,
// A8B8G8R8_SRGB_PACK32 = 57,
// A2R10G10B10_UNORM_PACK32 = 58,
// A2R10G10B10_SNORM_PACK32 = 59,
// A2R10G10B10_USCALED_PACK32 = 60,
// A2R10G10B10_SSCALED_PACK32 = 61,
// A2R10G10B10_UINT_PACK32 = 62,
// A2R10G10B10_SINT_PACK32 = 63,
// A2B10G10R10_UNORM_PACK32 = 64,
// A2B10G10R10_SNORM_PACK32 = 65,
// A2B10G10R10_USCALED_PACK32 = 66,
// A2B10G10R10_SSCALED_PACK32 = 67,
// A2B10G10R10_UINT_PACK32 = 68,
// A2B10G10R10_SINT_PACK32 = 69,
// R16_UNORM = 70,
// R16_SNORM = 71,
// R16_USCALED = 72,
// R16_SSCALED = 73,
// R16_UINT = 74,
// R16_SINT = 75,
// R16_SFLOAT = 76,
// R16G16_UNORM = 77,
// R16G16_SNORM = 78,
// R16G16_USCALED = 79,
// R16G16_SSCALED = 80,
// R16G16_UINT = 81,
// R16G16_SINT = 82,
// R16G16_SFLOAT = 83,
// R16G16B16_UNORM = 84,
// R16G16B16_SNORM = 85,
// R16G16B16_USCALED = 86,
// R16G16B16_SSCALED = 87,
// R16G16B16_UINT = 88,
// R16G16B16_SINT = 89,
// R16G16B16_SFLOAT = 90,
// R16G16B16A16_UNORM = 91,
// R16G16B16A16_SNORM = 92,
// R16G16B16A16_USCALED = 93,
// R16G16B16A16_SSCALED = 94,
// R16G16B16A16_UINT = 95,
// R16G16B16A16_SINT = 96,
// R16G16B16A16_SFLOAT = 97,
// R32_UINT = 98,
// R32_SINT = 99,
// R32_SFLOAT = 100,
// R32G32_UINT = 101,
// R32G32_SINT = 102,
// R32G32_SFLOAT = 103,
// R32G32B32_UINT = 104,
// R32G32B32_SINT = 105,
// R32G32B32_SFLOAT = 106,
// R32G32B32A32_UINT = 107,
// R32G32B32A32_SINT = 108,
// R32G32B32A32_SFLOAT = 109,
// R64_UINT = 110,
// R64_SINT = 111,
// R64_SFLOAT = 112,
// R64G64_UINT = 113,
// R64G64_SINT = 114,
// R64G64_SFLOAT = 115,
// R64G64B64_UINT = 116,
// R64G64B64_SINT = 117,
// R64G64B64_SFLOAT = 118,
// R64G64B64A64_UINT = 119,
// R64G64B64A64_SINT = 120,
// R64G64B64A64_SFLOAT = 121,
// B10G11R11_UFLOAT_PACK32 = 122,
// E5B9G9R9_UFLOAT_PACK32 = 123,
// D16_UNORM = 124,
// X8_D24_UNORM_PACK32 = 125,
// D32_SFLOAT = 126,
// S8_UINT = 127,
// D16_UNORM_S8_UINT = 128,
// D24_UNORM_S8_UINT = 129,
// D32_SFLOAT_S8_UINT = 130,
// G8B8G8R8_422_UNORM = 1000156000,
// B8G8R8G8_422_UNORM = 1000156001,
// R10X6_UNORM_PACK16 = 1000156007,
// R10X6G10X6_UNORM_2PACK16 = 1000156008,
// R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
// G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
// B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
// R12X4_UNORM_PACK16 = 1000156017,
// R12X4G12X4_UNORM_2PACK16 = 1000156018,
// R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
// G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
// B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
// G16B16G16R16_422_UNORM = 1000156027,
// B16G16R16G16_422_UNORM = 1000156028,
// A4R4G4B4_UNORM_PACK16 = 1000340000,
// A4B4G4R4_UNORM_PACK16 = 1000340001,
// R16G16_S10_5_NV = 1000464000,
// A1B5G5R5_UNORM_PACK16_KHR = 1000470000,
// A8_UNORM_KHR = 1000470001,
